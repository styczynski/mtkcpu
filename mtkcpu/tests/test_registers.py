from mtkcpu.utils.tests.memory import MemoryContents
from mtkcpu.utils.tests.registers import RegistryContents
from mtkcpu.utils.tests.utils import (ADD, AND, ANDI, OR, ORI, SLL, SLLI, SRA,
                                      SRAI, SRL, SRLI, SUB, XOR, XORI,
                                      MemTestCase, MemTestSourceType, mem_test,
                                      x1, x2, x3, x5, x10, x11)

REGISTERS_TESTS = [
    MemTestCase(
        name="simple 'add'",
        source_type=MemTestSourceType.TEXT,
        source=ADD(x3, x2, x3),
        out_reg=3,
        out_val=5,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'sub'",
        source_type=MemTestSourceType.TEXT,
        source=SUB(x10, x3, x2),
        out_reg=10,
        out_val=1,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'srli'",
        source_type=MemTestSourceType.TEXT,
        source=SRLI(x10, x11, 2),
        out_reg=10,
        out_val=0b1,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.empty(value=0b111),
    ),
    MemTestCase(
        name="simple 'srl'",
        source_type=MemTestSourceType.TEXT,
        source=SRL(x10, x11, x1),
        out_reg=10,
        out_val=0b101,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'slli'",
        source_type=MemTestSourceType.TEXT,
        source=SLLI(x10, x11, 2),
        out_reg=10,
        out_val=0b11100,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.empty(value=0b111),
    ),
    MemTestCase(
        name="simple 'sll'",
        source_type=MemTestSourceType.TEXT,
        source=SLL(x10, x11, x1),
        out_reg=10,
        out_val=0b10110,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'sra'",
        source_type=MemTestSourceType.TEXT,
        source=SRA(x10, x11, x1),
        out_reg=10,
        out_val=0b101,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'srai'",
        source_type=MemTestSourceType.TEXT,
        source=SRAI(x10, x11, 2),
        out_reg=10,
        out_val=0b1,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.empty(value=0b111),
    ),
    MemTestCase(
        # calculated by https://www.cs.cornell.edu/courses/cs3410/2019sp/riscv/interpreter/
        name="fully functional 'srai'",
        source_type=MemTestSourceType.TEXT,
        source=SRAI(x2, x1, 4),
        out_reg=2,
        out_val=-7
        & 0xFFFFFFFF,  # ah, that python infinite-bit representation...
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.empty(value=-100),
    ),
    MemTestCase(
        name="fully functional 'sra'",
        source_type=MemTestSourceType.TEXT,
        source=SRA(x2, x2, x1),
        out_reg=2,
        out_val=0b11000000000000000000000000000000,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents(reg=[0, 1, 0x80000000]),
    ),
    MemTestCase(
        name="simple 'or'",
        source_type=MemTestSourceType.TEXT,
        source=OR(x2, 0b00001, 0b00111),
        out_reg=2,
        out_val=0b111,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'and'",
        source_type=MemTestSourceType.TEXT,
        source=AND(x2, 0b10011, 0b00111),
        out_reg=2,
        out_val=0b11,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'xor'",
        source_type=MemTestSourceType.TEXT,
        source=XOR(x2, 0b10101, 0b1111),
        out_reg=2,
        out_val=0b11010,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'xori'",
        source_type=MemTestSourceType.TEXT,
        source=XORI(x5, 0b11111, 0b01010),
        out_reg=5,
        out_val=0b10101,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'ori'",
        source_type=MemTestSourceType.TEXT,
        source=ORI(x2, 0b00001, 0b00111),
        out_reg=2,
        out_val=0b111,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
    MemTestCase(
        name="simple 'andi'",
        source_type=MemTestSourceType.TEXT,
        source=ANDI(x2, 0b10011, 0b00111),
        out_reg=2,
        out_val=0b11,
        timeout=5,
        mem_init=MemoryContents.empty(),
        reg_init=RegistryContents.fill(),
    ),
]


@mem_test(REGISTERS_TESTS)
def test_registers(_):
    pass
